# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nmba9LBxrjjg0verQRuWpSb8h4aMlJzh
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np

# Tickers de exemplo (adicione mais conforme desejar)
fii_tickers = ['HGLG11.SA', 'VISC11.SA', 'KNRI11.SA', 'MXRF11.SA', 'XPLG11.SA']

st.title("üìä An√°lise de Fundos Imobili√°rios (FIIs)")
st.markdown("Selecione os filtros abaixo para visualizar os FIIs que atendem aos seus crit√©rios:")

# Sliders para filtro de dados
dy_min, dy_max = st.slider("DY (%)", 0.0, 20.0, (6.0, 15.0))
pvp_min, pvp_max = st.slider("P/VP", 0.0, 2.0, (0.8, 1.2))
caixa_min, caixa_max = st.slider("Percentual do Caixa (%)", 0.0, 100.0, (0.0, 100.0))
cotistas_min, cotistas_max = st.slider("N¬∫ de cotistas", 0, 100000, (0, 100000))
cagr_dy_min, cagr_dy_max = st.slider("DY CAGR 3 anos (%)", 0.0, 50.0, (0.0, 50.0))
cagr_valor_min, cagr_valor_max = st.slider("Valor CAGR 3 anos (%)", 0.0, 50.0, (0.0, 50.0))
liquidez_min, liquidez_max = st.slider("Liquidez m√©dia di√°ria (R$)", 0.0, 5_000_000.0, (0.0, 5_000_000.0))
patrimonio_min, patrimonio_max = st.slider("Patrim√¥nio (R$)", 0.0, 10_000_000_000.0, (0.0, 10_000_000_000.0))

# Fun√ß√£o mock para gerar dados simulados para campos n√£o dispon√≠veis via yfinance
def mock_fii_data(ticker):
    info = yf.Ticker(ticker).info
    return {
        "Ticker": ticker.replace(".SA", ""),
        "Pre√ßo": info.get("currentPrice", np.nan),
        "DY": round(info.get("dividendYield", 0) * 100, 2) if info.get("dividendYield") else np.nan,
        "P/VP": round(info.get("priceToBook", np.nan), 2),
        "% Caixa": np.random.uniform(0, 100),
        "Cotistas": np.random.randint(1000, 100000),
        "DY CAGR 3y": np.random.uniform(0, 50),
        "Valor CAGR 3y": np.random.uniform(0, 50),
        "Liquidez": np.random.uniform(50_000, 5_000_000),
        "Patrim√¥nio": np.random.uniform(1_000_000, 10_000_000_000)
    }

# Coletar dados de todos os tickers
fii_data = [mock_fii_data(ticker) for ticker in fii_tickers]
df = pd.DataFrame(fii_data)

# Aplicar filtros
filtros = (
    (df['DY'].between(dy_min, dy_max)) &
    (df['P/VP'].between(pvp_min, pvp_max)) &
    (df['% Caixa'].between(caixa_min, caixa_max)) &
    (df['Cotistas'].between(cotistas_min, cotistas_max)) &
    (df['DY CAGR 3y'].between(cagr_dy_min, cagr_dy_max)) &
    (df['Valor CAGR 3y'].between(cagr_valor_min, cagr_valor_max)) &
    (df['Liquidez'].between(liquidez_min, liquidez_max)) &
    (df['Patrim√¥nio'].between(patrimonio_min, patrimonio_max))
)

st.subheader("üìà Resultados Filtrados")
st.dataframe(df[filtros].reset_index(drop=True))